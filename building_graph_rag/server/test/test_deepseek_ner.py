import boto3
import json
import re
from openai import OpenAI


client = OpenAI(
    api_key="*******************",
    base_url="https://api.deepseek.com"
)

query = "请生成一篇文章，全面介绍中轴线的核心历史节点（如故宫、天坛、钟鼓楼等）及其文化意义。文章需涵盖中轴线在不同历史时期的演变过程，并突出其作为中华文化象征的重要性。"
query = "介绍端门彩画的历史渊源" # 这个query会导致deepseek无法正常提取三元组
prompt = f"""使用自然语言抽取三元组,已知下列句子,请从句子中抽取出可能的实体、关系,
所抽取的实体关系必须要在以下分类范围内:
建筑艺术
建筑艺术是中轴线的核心艺术形式，包含建筑的主要元素和构成部分。
- 建筑：建筑本体，包括外观、结构和尺度。
- 材料：用于建筑的物质，如汉白玉、檀木等，决定美学和稳定性。
- 构件：建筑的基本组成单元，如柱子、琉璃瓦等。
- 形制：建筑的形状、结构和比例。
- 功能：建筑的用途，如祭祀、居住等。

---
装饰艺术（）
装饰艺术关注中轴线建筑的图案、色彩和工艺，展示装饰元素的艺术表现。
- 纹样：装饰的基本图案与形状。
- 色彩：装饰和建筑的色彩设计，影响视觉效果和情感表达。
- 工艺：装饰或构件创作和制作过程中使用的技术与方法。
- 题材：装饰艺术的主题分类，如自然、文化等。

---
选址与空间布局
此部分探讨建筑选址与空间布局艺术，重点是建筑与其环境的关系。
- 选址：建筑的具体地理位置和抽象位置意义。
- 布局：建筑的空间安排，如中轴对称等。

---
历史与文化背景
历史与文化背景关系到北京中轴线的形成与传承，涉及多个方面的外部因素。
- 生态环境：建筑所处的自然环境及其生态特点。
- 社会活动：与建筑相关的社会功能和活动。
- 文化氛围：与建筑艺术关联的文化背景。
- 政治与经济：影响建筑及空间设计的政治和经济因素。

---
时间维度
时间维度反映了建筑艺术和文化遗产的历史演变，包括不同历史阶段的时间信息。
- 历史纪年：不同历史时期使用的纪年方式。
- 历史阶段：涉及中轴线建筑和文化遗产的历史时期和阶段。

---
角色与组织
此部分涉及与北京中轴线相关的个人与组织，反映他们在文化遗产中的作用。
- 个体角色：与中轴线相关的历史人物、建筑师、艺术家等。
- 组织角色：政府、研究机构、文化单位等团体的角色。

---
文化文献
文化文献包括与北京中轴线相关的历史文献和经典书籍，承载着历史与文化知识。
- 历史档案：记录中轴线历史和文化的文献资料。
- 经典著作：具有文化和学术价值的书籍与文件。

---
文化理念
文化理念指的是影响北京中轴线设计与艺术表达的哲学观念和思想体系。
- 哲学思想：与建筑艺术相关的哲学理论。
- 历史典故：影响建筑和装饰设计的历史故事和象征。

---
所有分类总结如下:
建筑艺术:建筑, 建筑艺术:材料, 建筑艺术:构件, 建筑艺术:形制, 建筑艺术:功能
装饰艺术:纹样, 装饰艺术:色彩, 装饰艺术:工艺, 装饰艺术:题材 
选址与空间布局:选址, 选址与空间布局:布局
历史与文化背景:生态环境, 历史与文化背景:社会活动, 历史与文化背景:文化氛围, 历史与文化背景:政治与经济
时间维度:历史纪年, 时间维度:历史阶段
角色与组织:个体角色, 角色与组织:组织角色
文化文献:历史档案, 文化文献:经典著作, 文化理念:哲学思想, 文化理念:历史典故

示例：
句子：故宫的建筑设计体现了中国古代的哲学思想。
提取的三元组：(故宫, 体现, 中国古代的哲学思想, 文化理念:哲学思想)

你可以先识别出实体再判断实体之间的关系,以(头实体,关系,尾实体,关系分类)的形式回答，请尽可能多的返回所有实体关系，不要添加其他任何多余解释信息，保证格式化输出:
句子：{query}
提取的三元组："""



request = prompt


try:
    # 调用模型
    response = client.chat.completions.create(
        model="deepseek-chat",
        messages = [
            {
                "role": "user",
                "content": request
            }
        ],
        temperature=0.1,
        stream = False
    )
    print(response.choices[0].message.content)

    content = response.choices[0].message.content
    triples_temp = content.split("\n")
    print(triples_temp)
    triples = []
    #print(type(triples))
    print("\n解析后的三元组：")
    print(triples)
    for item in triples_temp:
        item = item.strip("(").strip(" ").strip(")").split(",")
        print(item)
        head, relation, tail, relation_category = item[0].strip(), item[1].strip(), item[2].strip(), item[3].strip()
        triples.append((head, relation, tail, relation_category))
        print(head)
        print(relation)
        print(tail)
        print(relation_category)
    print("最终解析结果:\n")
    print(triples)
        
except Exception as e:
    print(f"调用模型时出错: {e}")
